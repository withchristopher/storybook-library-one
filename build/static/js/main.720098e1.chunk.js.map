{"version":3,"sources":["lib/redux.js","components/Task.js","components/TaskList.js","components/InboxScreen.js","App.js","reportWebVitals.js","index.js"],"names":["actions","taskStateReducer","taskState","state","action","tasks","map","task","id","createStore","type","title","Task","onArchiveTask","onPinTask","className","defaultChecked","disabled","name","onClick","value","readOnly","placeholder","event","stopPropagation","PureTaskList","loading","events","LoadingRow","length","tasksInOrder","filter","t","defaultProps","connect","dispatch","archiveTask","pinTask","PureInboxScreen","error","TaskList","App","store","InboxScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.720098e1.chunk.js","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return {\n      ...state,\n      tasks: state.tasks.map(task =>\n        task.id === action.id ? { ...task, state: taskState } : task\n      ),\n    };\n  };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\n    case actions.PIN_TASK:\n      return taskStateReducer('TASK_PINNED')(state, action);\n    default:\n      return state;\n  }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Task({task: { id, title, state}, onArchiveTask, onPinTask }) {\n    return (\n        <div className={`list-item ${state}`}>\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              defaultChecked={state === 'TASK_ARCHIVED'}\n              disabled={true}\n              name=\"checked\"\n            />\n            <span className=\"checkbox-custom\" onClick={() => onArchiveTask(id)} />\n          </label>\n          <div className=\"title\">\n            <input type=\"text\" value={title} readOnly={true} placeholder=\"Input title\" />\n          </div>\n    \n          <div className=\"actions\" onClick={event => event.stopPropagation()}>\n            {state !== 'TASK_ARCHIVED' && (\n              // eslint-disable-next-line jsx-a11y/anchor-is-valid\n              <a onClick={() => onPinTask(id)}>\n                <span className={`icon-star`} />\n              </a>\n            )}\n          </div>\n        </div>\n      );\n    }\n\nTask.propTypes = {\n    /** Composition of the task */\n    task: PropTypes.shape({\n        /** Id of the task */\n        id: PropTypes.string.isRequired,\n        /** Title of the task */\n        title: PropTypes.string.isRequired,\n        /** Current state of the task */\n        state: PropTypes.string.isRequired,\n    }),\n    /** Event to change the task to archived */\n    onArchiveTask: PropTypes.func,\n    /** Event to change the task to pinned */\n    onPinTask: PropTypes.func,\n    };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Task from './Task';\n\n// import redux\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\n\n\nexport function PureTaskList({ loading, tasks, onPinTask, onArchiveTask }) {\n  const events = {\n    onPinTask,\n    onArchiveTask,\n  };\n\n  const LoadingRow = (\n    <div className=\"loading-item\">\n      <span className=\"glow-checkbox\" />\n      <span className=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  );\n  if (loading) {\n    return (\n      <div className=\"list-items\">\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n      </div>\n    );\n  }\n  if (tasks.length === 0) {\n    return (\n      <div className=\"list-items\">\n        <div className=\"wrapper-message\">\n          <span className=\"icon-check\" />\n          <div className=\"title-message\">You have no tasks</div>\n          <div className=\"subtitle-message\">Sit back and relax</div>\n        </div>\n      </div>\n    );\n  }\n  const tasksInOrder = [\n    ...tasks.filter(t => t.state === 'TASK_PINNED'),\n    ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n  ];\n  return (\n    <div className=\"list-items\">\n      {tasksInOrder.map(task => (\n        <Task key={task.id} task={task} {...events} />\n      ))}\n    </div>\n  );\n}\n\nPureTaskList.propTypes = {\n    /** Checks if it's in loading state */\n    loading: PropTypes.bool,\n    /** The list of tasks */\n    tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n    /** Event to change the task to pinned */\n    onPinTask: PropTypes.func.isRequired,\n    /** Event to change the task to archived */\n    onArchiveTask: PropTypes.func.isRequired,\n  };\nPureTaskList.defaultProps = {\n    loading: false,\n    };\n    \n    export default connect(\n    ({ tasks }) => ({\n        tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\n    }),\n    dispatch => ({\n        onArchiveTask: id => dispatch(archiveTask(id)),\n        onPinTask: id => dispatch(pinTask(id)),\n    })\n    )(PureTaskList);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\n\nimport TaskList from './TaskList';\n\nexport function PureInboxScreen({ error }) {\n    if (error) {\n        return (\n        <div className=\"page lists-show\">\n            <div className=\"wrapper-message\">\n                <span className=\"icon-face-sad\" />\n                    <div className=\"title-message\">Oh no!</div>\n                <div className=\"subtitle-message\">Something went wrong</div>\n            </div>\n        </div>\n        );\n    }\n    return (\n        <div className=\"page lists-show\">\n          <nav>\n            <h1 className=\"title-page\">\n              <span className=\"title-wrapper\">Taskbox</span>\n            </h1>\n          </nav>\n          <TaskList />\n        </div>\n    );\n}\n\nPureInboxScreen.propTypes = {\n    /** The error message */\n    error: PropTypes.string,\n};\n\nPureInboxScreen.defaultProps = {\n    error: null,\n  };\n  \n  export default connect(({ error }) => ({ error }))(PureInboxScreen);","import { Provider } from 'react-redux';\nimport store from './lib/redux';\n\nimport InboxScreen from './components/InboxScreen';\n\nimport './index.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <InboxScreen />\n    </Provider>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}